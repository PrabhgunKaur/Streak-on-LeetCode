class Solution {
public:
    /**
     * Finds the total number of continuous subarrays whose sum equals k.
     * * The core idea is to use the property:
     * sum[i..j] = sum[0..j] - sum[0..i-1]
     * * We are looking for sum[i..j] = k.
     * Rearranging, we need: sum[0..i-1] = sum[0..j] - k.
     * * The hash map stores the frequency of all prefix sums encountered so far.
     */
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> prefix_sum_counts;
        prefix_sum_counts[0] = 1;
        
        int current_sum = 0;
        int count = 0;
        
        for (int num : nums) {
            current_sum += num;
            int required_prefix_sum = current_sum - k;
            
            if (prefix_sum_counts.count(required_prefix_sum)) {
                count += prefix_sum_counts[required_prefix_sum];
            }
            prefix_sum_counts[current_sum]++;
        }
        
        return count;
    }
};
