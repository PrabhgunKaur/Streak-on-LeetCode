[METHOD-1]
class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int n = nums.size();
        vector<int>PrefixMax(n), SuffixMin(n);
        PrefixMax[0] = nums[0];
        for(int i=1; i<n; i++) {
            PrefixMax[i] = max(PrefixMax[i-1], nums[i]);
        }
        SuffixMin[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--) {
            SuffixMin[i] = min(SuffixMin[i+1], nums[i]);
        }
        for(int i=0; i<=n-2; i++){
            if(PrefixMax[i]<=SuffixMin[i+1]){
                return i+1;
            }
        }
        return n;
    }
};



[METHOD-2]
class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int n = nums.size();
        int prefixmax = nums[0];
        int overallmax = nums[0];
        int partitionidx = 0;
        for(int i=1; i<n; i++){
            overallmax = max(overallmax, nums[i]);
            if(nums[i] < prefixmax){
                prefixmax = overallmax;
                partitionidx = i;
            }
        }
        return partitionidx+1;
    }
};
